generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  slug        String   @unique
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  tags        String[] @default([])
  gender      Gender
  images      ProductImage[]
  OrderItem    OrderItem[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@index([gender])
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(user)

  address       UserAddress?
  Order         Order[]
}

model Country {
  id          String   @id @unique
  name        String
  UserAddress UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id          String  @id @default(uuid())
  name        String
  lastname    String
  city        String  
  state       String
  address     String
  address2    String?
  email       String
  phone       String
  postalCode  String

  // Relations
  country     Country  @relation(fields:[countryId], references:[id])
  countryId   String

  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  shipping     Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relaciones
  user         User      @relation(fields: [userId], references: [id])
  userId       String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?
}

model OrderItem {
  id        String @id @default(uuid())
  quantity  Int
  price     Float
  size      Size
  // Relaciones
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id          String  @id @default(uuid())
  name        String
  lastname    String
  city        String  
  state       String
  address     String
  address2    String?
  email       String
  phone       String
  postalCode  String

  // Relaciones
  
  country     Country @relation(fields: [countryId], references: [id])
  countryId   String

  Order       Order  @relation(fields: [orderId], references: [id])
  orderId     String @unique
}
